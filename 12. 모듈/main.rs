// 러스트는 조직화된 방식으로 코드의 재사용을 할 수 있게 해주는 모듈 시스템을 갖축 있다.
// mod 키워드는 새로운 모듈을 선언한다. 모듈 내의 코드는 이 선언 바로 뒤에 중괄호 로 묶여서 따라오거나 다른 파일에 놓인다
// 기본적으로 함수, 타입, 상수, 모듈은 private이다. pub로 public하게 만들어 줄 수 있다.
// use 키워드는 모듈이나 모듈내의 정의들을 스코프로 가져올 수 있게 해준다. 다른 언어의 import와 비슷한다.

// 모듈을 만들때는 cargo를 사용한다면 --bin옵션이 아닌 --lib옵션을 사용한다.
// cargo new foo --lib

// 모듈 파일 시스템의 규칙이 존재하는데
// 만일 foo라는 이름의 모듈이 서브 모듈을 가지고 있지 않다면, foo.rs라는 이름 안에 foo에 대한 선언을 집어 넣어야 한다.
// 만일 foo가 서브 모듈을 가지고 있다면 foo/mod.rs라는 이름의 파일에 foo에 대한 선언을 집어 넣어야 한다.
// 이 규칙들은 재귀적으로 적용되므로, foo라는 이름의 모듈이 bar라는 이름의 서브 모듈을 가지고 있고, bar는 서브모듈이 없다면 src 디렉토리는 다음과 같다.
// ├── foo
// │   ├── bar.rs
// │   └── mod.rs 
// 이 모듈들은 부모 모듈의 파일에 mod키워드를 사용하여 선언되어 있어야 한다.

// use module::a 와 같은 형태로 모듈을 참조할 수 있다.
// use 키워드는 명시한 것만 스코프로 가져온다.
// *을 통해서 모두 가져올 수 있다.

fn main() {

}